//{ Driver Code Starts
import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            int r = sc.nextInt();
            int c = sc.nextInt();

            int matrix[][] = new int[r][c];

            for (int i = 0; i < r; i++) {
                for (int j = 0; j < c; j++) matrix[i][j] = sc.nextInt();
            }
            Solution ob = new Solution();
            ArrayList<Integer> ans = ob.spirallyTraverse(matrix);
            for (Integer val : ans) System.out.print(val + " ");
            System.out.println();
        }
    }
}
// } Driver Code Ends


class Solution {
    // Function to return a list of integers denoting spiral traversal of matrix.
    public ArrayList<Integer> spirallyTraverse(int matrix[][]) {
        // code here
        int n= matrix.length;
        int m= matrix[0].length;
        int startRow=0;
        int endRow=n-1;
        int startCol=0;
        int endCol=m-1;
    ArrayList<Integer> ans = new ArrayList<>();
    while(startRow<=endRow && startCol<= endCol){
        //i:- row, j:-col
        //top:-startRow is constant
        for(int j=startCol;j<=endCol;j++)ans.add(matrix[startRow][j]);
         //right:-endCol is constant.
         for(int i=startRow+1;i<=endRow;i++)ans.add(matrix[i][endCol]);
         
        //bottom:- endRow is Constant.
        for(int j=endCol-1;j>=startCol;j--){
        //row conflicts
        if(startRow==endRow)break;
        ans.add(matrix[endRow][j]);
        }
        
        //left:- startCol is constant.
        for(int i=endRow-1;i>=startRow+1;i--){
        //col conflicts
            if(startCol==endCol)break;
            ans.add(matrix[i][startCol]);
            
        }
        startRow++;
        endRow--;
        startCol++;
        endCol--;
        
    }
    return ans;
        
    }
    
}
